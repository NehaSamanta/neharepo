1.RUN PROJECT WITHOUT PORT:( i.ec2lanch instance->select exit security gr->user data -> copy public IPV4 -> in bitvise
pwd
cd /
pwd
cd /etc/ngnix/sites-available/
/etc/ngnix/sites-avaliable$ sudo nano default
comment previous location 
location / {
                proxy_pass http://localhost:4000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'Upgrade'; 
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
        }
sudo systemctl restart ngnix
->copy IPV4 past it tab

2. LOAD BALANCE EC2 :(i.EC2 left lanch Templates->give name ->version var1-> check auto scaling guidance->...-> select exit security gr-> give user data ->in EC2 create auto scaling gr->auto saling gr nane->lanche template(privious created)->version Latest(1)->in Network,availability zone click all zones and subnets click next->
in load balancing click "Attach to new load balance"->load balance scheme click "internet-facing"->in listen HTTP 4000 default routing select autoscaling gr->next->in group size 2 2 3->in scaling policies click "Target tracking scaling policy" instance need 300->next->click Auto Scaling group (it will be created->bitvise ->
nano infi1.sh
#!/bin/bash

while true
do
   echo "Loop forever"
done
chmod +x infi1.sh
./infi1.sh
->click on connect(another terminal will open)       same as previous
nano infi2.sh
chmod +x infi2.sh
./infi2.sh
see cpu utilizer

USER DATA

#!/bin/bash
apt-get update
apt-get install -y nginx
systemctl start nginx
systemctl enable nginx
apt-get install -y git
curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
apt-get install -y nodejs
git clone https://github.com/.../...
cd ...
npm install
node index.js

CREATE MFA:(near sign out Security Credentails ->Assign MFA Device ->Specify a name in device then Next -> scan QR code with Google authenticator.

CREATE IAM user and full access s3:(IAM->users->add users->"I want to ...->custom password(next)->user gr click create group give permisissions s3 create next->goto create user download.csv file click reurn to user list->clck on crteated user ->security credentials->copy console sign_in link past in another tab of crome->after opening the console link user should give relevant details-> user has to change password-> it open IAMuser account.

CREATE PRIVATE BUCKET:(s3 create bucket->ACLs is disable check Block all public access create buckey->click on name(new bucket) click upload->copy URLS of the file -> paste it in new tab->click on the file which is uploaded on the bucket (budgets.csv)->click Object Actions -> share with a presigned URL -> set time -> create prisnged URL->copy presigned URL and paste it.

CREATE PUBLIC BUCKET:(s3 create bucket->ACLs enable->unchecked "Block all public access"->check "I acknowledge.."->create bucket->click on bucket "upload"->click file copy"object URL"->click on file go to permission edit ->check "Everyone (public access)"->check"I understand.."->first two option check->save change-> click "object URL"

STATIC WEBSITE ON S3:(s3 create bucket->ACLs enable->unchecked "Block all public access"->check "I acknowledge.."->create bucket->click on bucket ->go to 'properties'->at the bottom option "Static website hosting"->click on 'edit'->click on enable->enter name Index document as "index.html" left others as it is -> click "Save changes"->go to object click "Upload" ->upload more than one.html files click upload->go to bucket->object and click  the check box in left of folder(ex-website).if upload file separately then clich every box.->click "Actions" click "Make public using ACl" then click make public->click on index.html ->copy "Object URL" paste it to another tab.

STATIC WEBSITE IN EC2:(in EC2 Launch instances->allow SSH HTTPS HTTP->copy Public Ipv4->bitvise ubuntu->
sudo apt-get update
sudo apt-get upgrade 
sudo apt-get install ngnix
cd ..
cd ..
pwd output /
cd var
cd www
sudo chmod 777
->go to New SFTP window ->remote files html option copy all html ml files and paste it to html section(/var/www/html  index.ngnix...)->now copy Ipv4 and paste.

DEPLOY A PROJECT FROM LOCAL MACHINE TO GIT:(Top Repositories->New->create Repository->give name mahe it "PRIVATE" ->repo created ->profile name->settings->Developer Setting->Tokens(classic)->generate new tocken->enter token name set expiration as like ->check all boxs->generate token and copy it ->Click on that folder want to upload in github->Right click Git bash here->
git init
git config --global user.email "your mail id"
git add .
git commit -m "done"
git remote add origin "remote repo URl like https://github.com/Neha.."
git push -f origin master
->popup window give token->it will upload the file from folder->create folder (repo4)->Git bash here->
git clone (Sir ar repo)
ls     optput New-repo1/
cd New-repo1/
ls

A PROJECT FROM GITHUB TO EC2:(create Ec2 instance(allow SSH HTTPS HTTP)->copy public Ipv4
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install ngnix 
curl -sL https://deb.nodesource.com/setup_16.x|sudo -E bash -
sudo apt install nodejs
git clone (own repository) //username password :token 
ls      output -repo2
cd repo2
npm install
->go to instance ->security->click security group->click Edit inbound rules->click add rule ->in Type select coustom TCP ->port range 4000->source Anywhere public IPV4 
node index.js

DEPLOY A PROJECT FROM GITHUB TO EC2 BY NEW SECURITY GROUP:(EC2->security groups->name same description in inbound rules click add rule custom TCP(4000),SSH,HTTP,HTTPS->created-> instances->give userdata->lanch instance

A WORKMAIL :(amazon workmail->create organization->in organization setting "Free test domail" in alias type name(mckv1234)->click "users" left side click "create user"->user name(neha1234).....->click create user->organization->click "Amazon workmail web application"->give username password->

CREATE ANELASTIC IP FOR AN INSTANCE:(ec2 lanch instance->select exiting security group->select security gr->lanch->in bitvise login-> stop instace ->restart->
EC2 dashboard->click Elastic IPs->click "Allocate Elastic Ip adderss"->click Allocate->click Allocated IPV4 ->click "Associated Elastic Ip address"->click on instance->select EC2(which one  ypu want to elatic->click on private IP address->click on associate->it will not change

CREATE SERVERLESS COMPUTING SERVICE:(search Lambda->create a function->select "author from search->type func(func1)->runtime choice(Node.js 18.x) ->click create function->
in fcntl scroll go to code section and edit the index.mjs file save it and deploy->goto configuration ->left side select "function url"->create function url->select NONE click save->copy function URL paste it.



